## DataFrameのデータを活用する

#1. ユニークなデータの取得

# uniqueメソッドを利用する
# 列データに保管されている値を重複なしに抽出する
# DataFrame変数.[列名].unique()


#%%
print(df2['名前'].unique())
# ['山田' '田中' '佐藤' '鈴木' '高橋' '武田' '中西' '江口' '高野' '小川' '上杉' '黒田']
print(df2['教科'].unique())
# ['国語' '数学' '英語' '理科' '社会']

# 列データにはpandasの「series」クラスのインスタンスが保管されている。
# seriesインスタンスの作成は下記の通り

# 変数 = pd.Series(リスト)

#%%
s = pd.Series(list('ABCDHFG'))
s[:3]
# 0    A
# 1    B
# 2    C
# dtype: object

#2. Seriesインスタンスの演算

# リストのように多数の値を持っているが、整数や実数のように演算が可能

#%%
print(df2['中間'][:5])
print()
print((df2['中間']*2)[:5])
print()
print((df2['中間']//10)[:5])
# a    31
# b     9
# c    79
# d    59
# e    74
# Name: 中間, dtype: int64

# a     62
# b     18
# c    158
# d    118
# e    148
# Name: 中間, dtype: int64

# a    3
# b    0
# c    7
# d    5
# e    7
# Name: 中間, dtype: int64

#3. Seriesの統計メソッド

#合計
# [series].sum()

#平均
# [Series].mean()

#中央値
# [Series].median()

#最小値
# [Seires].min()

#最大値
# [Series].max()

#分散
# [Series].var()

#標準偏差
# [Series].std()

#%%
print('合計:%s点' % df2['中間'].sum())
print('平均:%s点' % df2['中間'].mean())
print('中央:%s点' % df2['中間'].median())
print('最低:%s点' % df2['中間'].min())
print('最高:%s点' % df2['中間'].max())
# 合計:2958点
# 平均:49.3点
# 中央:49.0点
# 最低:7点
# 最高:97点

#4. DataFrameのソート

# 特定の列を基準にして並び替えを行う「sort_values」メソッドが用意されている　

# 変数 = データフレーム名.sort_values([列名], ascending= 真偽値)
# 真偽値はTrueなら昇順、Falseなら降順となる

#%%
df2.sort_values('中間',ascending=False)[:10]
# 	名前	教科	中間
# l	佐藤	数学	97
# s	鈴木	理科	96
# Q	高野	英語	94
# C	武田	理科	94
# y	高橋	社会	91
# V	小川	英語	89
# I	中西	社会	88
# H	中西	理科	88
# U	小川	数学	88
# A	武田	数学	85

#5. グループについて

# 同じような列名が複数ある場合に、それぞれの項目毎にまとめて扱うことをグループ化という。
# groupbyメソッドを使用し、グループを作成する

# 変数 = [データフレーム名].groupby(列名)

#%%
srt = df2.sort_values(['中間'], ascending=False)
grp = srt.groupby('教科')
grp.first()

# 	名前	中間
# 教科		
# 国語	佐藤	84
# 数学	佐藤	97
# 理科	鈴木	96
# 社会	高橋	91
# 英語	高野	94

# グループ化したデータを引数にしてデータを出力することはできない
# groupbyではGroupByというクラスのインスタンスの為、そのものにデータはない

#%%
grp.groups
# {'国語': Index(['k', 'u', 'E', 'z', 'J', 'Y', 'a', 'O', '4', 'T', 'f', 'p'], dtype='object'),
#  '数学': Index(['l', 'U', 'A', 'K', 'Z', 'F', 'q', 'g', '5', 'P', 'v', 'b'], dtype='object'),
#  '理科': Index(['s', 'C', 'H', 'i', 'M', 'n', 'd', 'R', '7', 'x', '2', 'W'], dtype='object'),
#  '社会': Index(['y', 'I', 'S', 'N', 'e', 'D', 'o', 'X', '8', 't', '3', 'j'], dtype='object'),
#  '英語': Index(['Q', 'V', 'c', 'w', 'm', '1', 'B', 'r', '6', 'h', 'G', 'L'], dtype='object')}

# groups - グループ化に関する情報が保管されているプロパティ

#6. GroupByの統計

# Seriesと同様なメソッドが使用可能
#%%
grp.mean()
# 	中間
# 教科	
# 国語	40.166667
# 数学	43.333333
# 理科	56.583333
# 社会	53.583333
# 英語	52.833333

#7. 合計点数でsortする

#%%
grp2 = srt.groupby('名前')
grp2.sum().sort_values(['中間'],ascending=False)
# 	中間
# 名前	
# 佐藤	351
# 武田	326
# 中西	299
# 高野	268
# 江口	264
# 高橋	261
# 山田	252
# 小川	236
# 鈴木	213
# 上杉	184
# 田中	164
# 黒田	140

#8. aggで集計する

# 統計メソッドを使用する際に、まとめて複数のメソッドの結果を出力する際にaggメソッドを使用する

# 変数 = [groupBy名].agg([メソッド名])

#%%
grp.agg(['sum','mean','min','max'])

# 	中間
# sum	mean	min	max
# 教科				
# 国語	482	40.166667	7	84
# 数学	520	43.333333	9	97
# 理科	679	56.583333	7	96
# 社会	643	53.583333	15	91
# 英語	634	52.833333	11	94

#9. 特定のグループを取り出す
# GroupByはデータ全体をグループ分けして整理する。
# この結果から特定のグループだけ取り出すときにget_groupメソッドを使用する

# 変数 = [GroupBy名].get_group(グループ名)

#%%
grp3 = srt.groupby('名前')
grp3.get_group('山田').sort_values(['中間'],ascending=False)
# 	名前	教科	中間
# c	山田	英語	79
# e	山田	社会	74
# d	山田	理科	59
# a	山田	国語	31
# b	山田	数学	9

# get_groupで取り出したデータはDataFrameインスタンスの為,sort_valuesなどで並び替えが可能

#10. 条件で検索する

# データ全体の中で特定の条件のものだけを出力したい場合に、queryメソッドを使用する

# 変数 = [データフレーム名].query(条件)

#%%
df2.query('中間 >= 80')
# 名前	教科	中間
# b	山田	数学	98
# g	田中	数学	99
# m	佐藤	英語	83
# n	佐藤	理科	92
# y	高橋	社会	90
# z	武田	国語	86
# A	武田	数学	89
# C	武田	理科	99
# D	武田	社会	85
# K	江口	数学	88
# N	江口	社会	95
# Q	高野	英語	86
# V	小川	英語	91
# W	小川	理科	87

# 条件文には基本的な比較演算子と論理演算子の使用が可能

#%%
df2.query('中間 >= 80 or 中間 <= 20')

# queryメソッドで得られる値はDataFrameの為、さらにDataFrameの処理が可能

#%%
df2.query('中間 >= 80').sort_values(['中間'],ascending=False)
# 	名前	教科	中間
# g	田中	数学	99
# C	武田	理科	99
# b	山田	数学	98
# N	江口	社会	95
# n	佐藤	理科	92
# V	小川	英語	91
# y	高橋	社会	90
# A	武田	数学	89
# K	江口	数学	88
# W	小川	理科	87
# z	武田	国語	86
# Q	高野	英語	86
# D	武田	社会	85
# m	佐藤	英語	83

#11. ピボットテーブルについて

# excelのピボットテーブルとおなじよう表示する値、インデクス、列といった項目を指定することで、
# その設定に従ったテーブルを生成する機能

# 変数 = [データフレーム名].pivot_table(values= [列名], index=[列], columns=[列])

# value - テーブルに表示する値の列(データ)
# index - インデクスとして使う列(縦軸)
# columns - 表示する列(横軸)

#%%
df2.pivot_table(values='中間', index=['名前'], columns= ['教科'])
# 教科	国語	数学	理科	社会	英語
# 名前					
# 上杉	45	50	12	23	54
# 中西	21	20	57	20	7
# 佐藤	54	62	92	20	83
# 小川	9	71	87	76	91
# 山田	36	98	39	25	46
# 武田	86	89	99	85	12
# 江口	55	88	8	95	56
# 田中	4	99	25	72	44
# 鈴木	19	22	45	52	52
# 高橋	31	35	18	90	9
# 高野	77	47	75	39	86
# 黒田	15	15	35	35	40

# データの要素が多い程、威力を発揮する

