## pandas
#1. pandas概要

# データ分析ライブラリの代表的なモジュール
# 他のモジュールと連携することにより、
# excelなどのファイルを直接読み込んだり、データをグラフ化したりする機能を持っている

#2. DataFrameについて

# pandasはデータをまとめたオブジェクトを作成し、それを操作することでデータの編集分析を行う
# このオブジェクトのことを「DataFrame」という

# DataFrameの作成の仕方は下記の通り

# 変数 = DataFrame(data= データ, columns= 列名)

# dataにはまとめるデータを用意し、columnsにはデータの列名を用意する。
# 二次元リストの形にする

#①リストデータを用意する
# zip関数を使用して、要素を一つのイテレータにまとめる


#%%
import numpy as np

arr1 = ['山田']*5 + ['田中']*5 +  ['佐藤']*5 +  ['鈴木']*5 +  ['高橋']*5 \
    +  ['武田']*5 + ['中西']*5 +  ['江口']*5 +  ['高野']*5 +  ['小川']*5
arr2 = ['国語', '数学', '英語', '理科', '社会']*10
arr3 = [np.random.randint(0,100)for i in range(50)]

print(arr1)
print(arr2)
print(arr3)

# ['山田', '山田', '山田', '山田', '山田', '田中', '田中', '田中', '田中', '田中', '佐藤', '佐藤', '佐藤', '佐藤', '佐藤', '鈴木', '鈴木', '鈴木', '鈴木', '鈴木', '高橋', '高橋', '高橋', '高橋', '高橋', '武田', '武田', '武田', '武田', '武田', '中西', '中西', '中西', '中西', '中西', '江口', '江口', '江口', '江口', '江口', '高野', '高野', '高野', '高野', '高野', '小川', '小川', '小川', '小川', '小川']
# ['国語', '数学', '英語', '理科', '社会', '国語', '数学', '英語', '理科', '社会', '国語', '数学', '英語', '理科', '社会', '国語', '数学', '英語', '理科', '社会', '国語', '数学', '英語', '理科', '社会', '国語', '数学', '英語', '理科', '社会', '国語', '数学', '英語', '理科', '社会', '国語', '数学', '英語', '理科', '社会', '国語', '数学', '英語', '理科', '社会', '国語', '数学', '英語', '理科', '社会']
# [15, 12, 71, 89, 33, 54, 95, 23, 7, 16, 81, 30, 73, 31, 47, 61, 49, 57, 98, 31, 43, 49, 5, 42, 54, 44, 57, 50, 39, 53, 79, 83, 8, 47, 80, 66, 25, 39, 68, 28, 83, 43, 26, 53, 31, 68, 46, 22, 20, 91]

#②　DataFrameを作成する
#%%
import pandas as pd

data = list(zip(arr1, arr2, arr3))
df = pd.DataFrame(data=data, columns=['名前', '教科', '点数'])
df.info()
# RangeIndex: 50 entries, 0 to 49
# Data columns (total 3 columns):
# 名前    50 non-null object
# 教科    50 non-null object
# 点数    50 non-null int64
# dtypes: int64(1), object(2)
# memory usage: 1.2+ KB
# # print()
df[:5]
# 	名前	教科	点数
# 0	山田	国語	31
# 1	山田	数学	21
# 2	山田	英語	11
# 3	山田	理科	16
# 4	山田	社会	3

# infoメソッドを使用することで、作成したDataFrameに関する情報を確認できる
# 各項目の説明
# RangeIndex  - インデックスのレンジ（上記の場合50個のインデクスがあり、0～49が割り当てられている)
# Data columns  - 各データコラムの情報
# dtypes - 使用されているデータタイプ
# memory  - 使用メモリ

# 最後にDataFrameインスタンスの変数を実行するとテーブルの形に成形されて表示される

#3. 列データについて

# 列データはDataFrameの列名の項目として保管されている
# 列データを取り出す際は
# 変数[列名][スライス]

#%%
df['点数'][:10]
# 0    31
# 1    21
# 2    11
# 3    16
# 4     3
# 5    78
# 6    61
# 7    36
# 8    38
# 9    13
# Name: 点数, dtype: int64

#列を追加したい場合には
# 変数[追加列名] = データ

#%%
import numpy as np

df['総合'] = [np.random.randint(0,100) for i in range(1,51)]
df[:5]
# 	名前	教科	点数	総合
# 0	山田	国語	31	20
# 1	山田	数学	21	77
# 2	山田	英語	11	34
# 3	山田	理科	16	44
# 4	山田	社会	3	56

# 列の削除は

# del 変数['列名']

#%%
del df['総合']
df[:5]

列の名前はDataFrameのcolumnsに保管されている。

#%%
df.columns
# Index(['名前', '教科', '点数'], dtype='object')

# 各列名を変更するには
# 変数.columns = ['列名', '列名', '列名']
# の変更したい個所を変える
#%%
df.columns = ['名前', '教科', '中間']
df[:5]
# 	名前	教科	中間
# 0	山田	国語	31
# 1	山田	数学	21
# 2	山田	英語	11
# 3	山田	理科	16
# 4	山田	社会	3

#4. 行を追加する

# 追加する行データをDataFrameにまとめて、追加する必要がある
# 新変数 = 変数.append(追加したいデータフレーム)

#①データの用意

#%%
new_data = [('上杉', '国語', 45),
            ('上杉', '数学', 50),
            ('上杉', '英語', 54),
            ('上杉', '理科', 12),
            ('上杉', '社会', 23)]

#②データをDataFrameに変換            
new_df = pd.DataFrame(data=new_data, columns=['名前','教科','中間'])
df2 = df.append(new_df, ignore_index=True)
df2[45:]
# 	名前	教科	中間
# 45	小川	国語	97
# 46	小川	数学	23
# 47	小川	英語	50
# 48	小川	理科	46
# 49	小川	社会	49
# 50	上杉	国語	45
# 51	上杉	数学	50
# 52	上杉	英語	54
# 53	上杉	理科	12
# 54	上杉	社会	23
# 追加する際に追加するdataframeのインデクスを無視するためには,
# ignore_index=Trueを第二引数にする


#5. 一行ずつ追加する

# 1行追加の度にdataframeを用意するのは面倒

# locプロパティを使用して、各行のデータをインデクスにまとめる
# あらたにインデクスを指定してデータを代入すれば、追加可能

#%%
df.loc[0]
# 名前    山田
# 教科    国語
# 中間    31
# Name: 0, dtype: object

#① shapeプロパティで現在の行数と列数をタプルで保管する

#%%
(rows, cols) = df2.shape
#rows-1が現在の末尾のインデクスの為、rowsから順に追加する
df2.loc[rows] = ['黒田', '国語', 15]
df2.loc[rows+1] = ['黒田', '数学', 15]
df2.loc[rows+2] = ['黒田', '英語', 40]
df2.loc[rows+3] = ['黒田', '理科', 35]
df2.loc[rows+4] = ['黒田', '社会', 35]
df2.tail(10)

#tailメソッドとheadメソッドを使って末尾と先頭から引数文のデータを確認できる

#6. インデクスの変更

# DataFrameではインデクスが自動で割り当てられるが、自由に変更が可能
# インデクスのDataFrameのindexプロパティにリストとしてまとめられているので、
# 行数と同じ数のリストを設定すればよい

#%%
df2.index = list('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ12345678')
df2.head(10)

# DataFrameにはindexプロパティとは別にilocプロパティで通し番号が用意されている
# indexプロパティを変更した場合に通し番号で変更したい場合にはilocプロパティで変更する

##7. 行列を反転する

# numpyと同様でTを指定すればよい
# T指定する際には順番に注意

#%%
df2.loc['a':'e'].T


#%%
df2

