## エスケープシーケンスを無視（無効化）するraw文字列

# Pythonで文字列リテラル'...', "..."の前にrまたはRをつけると、
# エスケープシーケンスを展開せずそのままの値が文字列となる。
# Windowsのパスや正規表現など、バックスラッシュを多用する文字列を扱うときに便利。

#1. エスケープシーケンス

# Pythonでは、通常の文字列では表せない文字（タブや改行など）を
# C言語などと同様にバックスラッシュ\をつけたエスケープシーケンス（\tや\nなど）で記述する。

#%%
s = 'a\tb\nc\td'
print(s)
# a	b
# c	d

#2. raw文字列でエスケープシーケンスを無視（無効化）

# 文字列リテラル'...', "..."の前にrまたはRをつけると、
# エスケープシーケンスを展開せずそのままの値が文字列となる。
# このような文字列はraw文字列（raw strings）と呼ばれる。

#%%
rs = r'a\tb\nA\tB'
print(rs)
#a\tb\nc\td

# raw文字列型という特別な型があるわけではなく、
# あくまでも文字列型で、バックスラッシュをエスケープした通常の文字列と等しい。

#%%
print(type(rs))
# <class 'str'>

print(rs == 'a\\tb\\nA\\tB')
# True

# 通常の文字列ではエスケープシーケンスは1文字とみなされるが、
# raw文字列ではバックスラッシュも文字数にカウントされる。
# 文字列の長さや各文字は以下のようになる。

#%%
print(len(s))
# 7

print(list(s))
# ['a', '\t', 'b', '\n', 'A', '\t', 'B']

print(len(rs))
# 10

print(list(rs))
# ['a', '\\', 't', 'b', '\\', 'n', 'A', '\\', 't', 'B']

# Windowsのパス

# raw文字列を使うと便利なのが、Windowsのパスを文字列で表したいとき。

# Windowsのパスはバックスラッシュ\で区切られているので、
# 通常文字列を使うといちいち\\のようにエスケープしないといけないが、
# raw文字列を使うとそのまま書ける。値としては等価。

#%%
path = 'C:\\Windows\\system32\\cmd.exe'
rpath = r'C:\Windows\system32\cmd.exe'
print(path == rpath)

# repr()で文字列変数をraw文字列に変換

# 通常の文字列の変数をエスケープシーケンスを
# 無視（無効化）したraw文字列に変換したい場合、組み込み関数repr()が使える。

#%%
s_r = repr(s)
print(s_r)
# 'a\tb\nc\td'

# repr()が返すのはeval()に渡されたときと
# 同じ値を持つようなオブジェクトを表す文字列であり、先頭と末尾に'が付いている。

#%%
print(list(s_r))
# ["'", 'a', '\\', 't', 'b', '\\', 'n', 'c', '\\', 't', 'd', "'"]

# スライスを使うとrを付けたraw文字列と等価な文字列が得られる。

#%%
s_r2 = s_r[1:-1]
print(s_r2)
# a\tb\nc\td

print(s_r2 == rs)
# True

print(r'\t' == repr('\t')[1:-1])
# True

まとめ
# ①windowsのパス表記のようなバックスラッシュを文字列に使用する場合にはraw文字列を利用する