## リスト（配列）を任意の値・要素数で初期化

# Pythonのリスト（配列）を任意の値・要素数で初期化する方法を説明する。

#1. 空リストを作成

#%%
l_empty = []
print(l_empty)
# []
print(len(l_empty))
# 0

# append()で要素を追加したり、remove()で削除したりできる。

#%%
l_empty.append(100)
l_empty.append(200)
print(l_empty)
# [100, 200]

l_empty.remove(100)
print(l_empty)
# [200]

#2. 任意の値・要素数で初期化

# 上述のようにPythonのリストは動的に要素を追加したり削除したりできるので
# 初期化が必要な場面は少ないが、
# すべての要素が任意の値で埋められた任意の要素数のリストを作成したい場合は、
# 以下のように*演算子を使う。

#%%
l = [0] * 10
print(l)
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

print(len(l))
# 10

print([0, 1, 2] * 3)
# [0, 1, 2, 0, 1, 2, 0, 1, 2]

#3. 2次元配列（リストのリスト）を初期化する際の注意
# リストのリストによって多次元配列の形のデータが作成できるが、この場合の初期化は注意が必要。

#%%
l_2d_ng = [[0] * 4] * 3
print(l_2d_ng)
# [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

#%%
l_2d_ng[0][0] = 5
print(l_2d_ng)
# [[5, 0, 0, 0], [5, 0, 0, 0], [5, 0, 0, 0]]

l_2d_ng[0].append(100)
print(l_2d_ng)
# [[5, 0, 0, 0, 100], [5, 0, 0, 0, 100], [5, 0, 0, 0, 100]]

# リスト内包表記を使って以下のように書けばOK。
#%%
l_2d_ok = [[0] * 4 for i in range(3)]
print(l_2d_ok)
# [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

# 要素のリストはそれぞれ異なるオブジェクトとして扱われる。

#%%
l_2d_ok[0][0] = 5
print(l_2d_ok)
# [[5, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]

l_2d_ok[0].append(100)
print(l_2d_ok)
# [[5, 0, 0, 0, 100], [0, 0, 0, 0], [0, 0, 0, 0]]

#4. タプル、配列（array型）の場合

# タプルの場合も同様だが、要素数1のタプルは,が必要なので注意。

#%%
t = (0, ) * 5
print(t)
# (0, 0, 0, 0, 0)

# まとめ
# ①リストに任意の要素で構成する場合には、演算子*を使用する
# ②二次元リストの場合には、異なる動作となる為注意が必要
