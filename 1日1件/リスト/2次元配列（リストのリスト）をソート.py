## 2次元配列（リストのリスト）をソート

# Pythonで2次元配列（リストのリスト）を
# sort()メソッドやsorted()関数で任意の要素に従ってソートする方法を説明する。

# NumPyを使っても同様の処理が可能。
# NumPyを使うと各列・各行をそれぞれソートしたりすることもできる。

#%%
import pprint

#1. リストオブジェクトの大小比較
# Pythonにおけるリストオブジェクトの大小比較は、最初の等しくない要素に対して行われる。

#%%
print([100] > [-100])
# True

print([1, 2, 100] > [1, 2, -100])
# True

print([1, 2, 100] > [1, 100])
# False

#2. 2次元配列（リストのリスト）のソート

# 以下の2次元配列（リストのリスト）を例とする。

#%%
l_2d = [[2, 30, 100], [1, 20, 300], [3, 10, 200]]

pprint.pprint(l_2d, width=40)
# [[2, 30, 100],
#  [1, 20, 300],
#  [3, 10, 200]]

# ort()メソッドやsorted()関数でソートする場合、
# デフォルトでは各リストが比較されソートされる。上述のように、リスト同士の比較は最初の等しくない要素に対して行われる。

# この例では、各リストの最初の要素同士が比較されソートされる。

#%%
l_2d.sort()
pprint.pprint(l_2d, width=40)
# [[1, 20, 300],
#  [2, 30, 100],
#  [3, 10, 200]]

#3. 引数keyに無名関数（ラムダ式）を指定

# 任意の要素に従ってソートしたい場合は、
# sort()メソッドやsorted()関数の引数keyに無名関数（ラムダ式）を指定する。

#%%
l_2d.sort(key=lambda x: x[1])
pprint.pprint(l_2d,width=40)
# [[3, 10, 200],
#  [1, 20, 300],
#  [2, 30, 100]]

# 多次元配列でも同様
#%%
l_3d = [[[0, 1, 2], [2, 30, 100]], [[3, 4, 5], [1, 20, 300]], [[6, 7, 8], [3, 10, 200]]]

l_3d = [[[0, 1, 2], [2, 30, 100]], [[3, 4, 5], [1, 20, 300]], [[6, 7, 8], [3, 10, 200]]]

pprint.pprint(l_3d, width=40)
# [[[0, 1, 2], [2, 30, 100]],
#  [[3, 4, 5], [1, 20, 300]],
#  [[6, 7, 8], [3, 10, 200]]]

l_sorted = sorted(l_3d, key=lambda x: x[1][0])

pprint.pprint(l_sorted, width=40)
# [[[3, 4, 5], [1, 20, 300]],
#  [[0, 1, 2], [2, 30, 100]],
#  [[6, 7, 8], [3, 10, 200]]]

# まとめ
# ①リストのソートをする際には、リスト同士の最初の正しくない値で評価される
# ②多次元配列のソートで特定の要素でソートしたい場合にはkeyを指定してソートする
# ③多次元でも同様
